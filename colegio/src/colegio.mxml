<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="1387" minWidth="955" minHeight="600" 
			   
			   creationComplete="initCollections()">
	
	
	
	<fx:Script>
		<![CDATA[			 		
			import flash.geom.Point;
			
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.controls.Menu;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.MenuEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPMultiService;
			import mx.rpc.http.HTTPService;
			import mx.rpc.http.mxml.HTTPService;
			import mx.utils.ObjectProxy;
			
			import spark.events.IndexChangeEvent;
			
			
			
			[Bindable]
			
			
			// menu global
			
			//creationComplete="initCollections()"
			public var menuBarCollection:XMLListCollection;
			private var menubarXML:XMLList =
				<>
				  <menuitem label="inicio" data="top">
					  <menuitem label="inicio" data="1A"/>
				  </menuitem>
				  
				  <menuitem label="Crear préstamo" data="top">
					  <menuitem label="Crear préstamo" data="2A"/>					  
				  </menuitem>
				  
				  <menuitem label="Eliminar préstamo" data="top">
					  <menuitem label="Eliminar préstamo" data="3A"/>					  
				  </menuitem>
					<menuitem label="Listar préstamos" data="top">
					  <menuitem label="Listar préstamos" data="3A"/>					  
				  </menuitem>
				<menuitem label="Actualizar préstamo" data="top">
					  <menuitem label="Actualizar préstamo" data="3A"/>					  
				  </menuitem>
				  
			  </>; 	
			
			private function initCollections():void {
				menuBarCollection = new XMLListCollection(menubarXML);
			}
			
			private var point1:Point = new Point();
			private var myMenu:Menu;
			
			
			private function menuHandler(event:MenuEvent):void {
				if (event.item.@data != "top") {
					
					if(event.item.@label == "Eliminar préstamo")
					{
						var interfazeliminar:EliminarPrestamo= new EliminarPrestamo();
						
						interfazeliminar.addEventListener(CloseEvent.CLOSE, cerrarinterfaz);
						
						PopUpManager.addPopUp(interfazeliminar,this,true);
						PopUpManager.centerPopUp(interfazeliminar);
					}
					if(event.item.@label == "Listar préstamos")
					{
						var interfazlistar:listarprestamo =  new listarprestamo();
						
						interfazlistar.addEventListener(CloseEvent.CLOSE, cerrarinterfaz);
						
						PopUpManager.addPopUp(interfazlistar,this,true);
						PopUpManager.centerPopUp(interfazlistar);
					}
					if(event.item.@label == "Crear préstamo")
					{
						var interfazdocente:crearPrestato= new crearPrestato();
						
						interfazdocente.addEventListener(CloseEvent.CLOSE, cerrarinterfaz);
						
						PopUpManager.addPopUp(interfazdocente,this,true);
						PopUpManager.centerPopUp(interfazdocente);
					}
					if(event.item.@label == "Actualizar préstamo")
					{
						var interfazactualizar:ActualizarPrestamo = new ActualizarPrestamo();						
						interfazactualizar.addEventListener(CloseEvent.CLOSE, cerrarinterfaz);
						
						PopUpManager.addPopUp(interfazactualizar,this,true);
						PopUpManager.centerPopUp(interfazactualizar);
					}
				}
			}
			
			
			public function cerrarinterfaz(evt:CloseEvent):void{
				
				//PopUpManager.removePopUp(evt.currentTarget as IFlexDisplayObject);
				PopUpManager.removePopUp(evt.currentTarget as IFlexDisplayObject);
				
			}
			
			
			//variables para el tamaño de letra
			var number = 12;
			var sizeTitle = 36;
			var banderasonido:Boolean= new Boolean(false);
			
			protected function checkbox1_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if(btndaltonico.selected){
					this.setStyle("backgroundColor", "#000000");
					this.setStyle("color","white");
					
				}else {
					this.setStyle("backgroundColor", "#ffffff");
					this.setStyle("color","black");
				}
				
			}
			protected function btnUpdateLeterUp_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
				
				if(number < 20 && sizeTitle < 44) {
					number = number +2;				
					sizeTitle = sizeTitle +2;
					this.setStyle("fontSize", number);				
					lbltitulo.setStyle("fontSize",sizeTitle);
				}
				// rollOver para evento pasar
			}
			protected function btnUpdateLeterDown_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub							
				
				
				// lbltirar.text = ""+number +" "+sizeTitle;
				if(number > 12 && sizeTitle > 36) {
					number = number - 2;
					sizeTitle = sizeTitle -2;
					this.setStyle("fontSize",number);
					lbltitulo.setStyle("fontSize",sizeTitle);	
				}
				
			}
			protected function button1_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if( btnsonido.label == "Activar Sonido")
				{ 
					btnsonido.label= "Desactivar Sonido";
					btnsonido.setStyle("icon", "assets/mute.png");
					banderasonido=true;
				}
				else
				{
					btnsonido.label= "Activar Sonido";
					btnsonido.setStyle("icon", "assets/soun.png");
					banderasonido = false;
				}
			}
			protected function btnhelp_clickHandler(event:MouseEvent):void	
			{
				Alert.show("Interfaz crear Préstamo\nEsta es una interfaz para crear préstamo de productos a profesores.\nLos préstamos se cran seleccionando un nombre de producto\n" +
					"y seleccionando un nombre de docente, posteriormente de presiona el botón Guardar préstamo");
				
			}
			
			
			
			//************************************************************************************
			protected function Sound3(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var snd:Sound = new Sound ( new URLRequest("assets/sonidobtn.mp3"));
				if(banderasonido==true)
				{					
					snd.play();
					//banderasonido = false;
				}				
				else{
					snd.close();
				}				
			}
			protected function Soundlbl(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var snd:Sound = new Sound ( new URLRequest("assets/sonidolbl.mp3"));
				if(banderasonido==true)
				{					
					snd.play();
					//banderasonido = false;
				}				
				else{
					snd.close();
				}				
			}
			protected function Soundtxt(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var snd:Sound = new Sound ( new URLRequest("assets/sonidotxt.mp3"));
				if(banderasonido==true)
				{					
					snd.play();
					//banderasonido = false;
				}				
				else{
					snd.close();
				}				
			}
			//*****************************************************************************************
				
			
			
			
			
			// Create and display the Menu control.
			private function showMenu():void {
				
				myMenu= Menu.createMenu(this, myMenuData, false);
				myMenu.labelField="@label"
				myMenu.addEventListener("itemClick", menuHandler1);
				
				// Calculate position of Menu in Application's coordinates. 
				/*point1.x=mybutton.x;
				point1.y=mybutton.y;                
				point1=mybutton.localToGlobal(point1);*/
				
				//myMenu.show();
			}
			
			// Event handler for the Menu control's change event.
			public function menuHandler1(event:MenuEvent):void  {
				Alert.show("Label: " + event.item.@label, "Clicked menu item");
			}												
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<fx:XML id="myMenuData">
			<root>
				<menuitem label="MenuItem 1" eventName="copy"/>
				<menuitem label="MenuItem 2" eventName="paste"/>
			</root>
		</fx:XML>
	</fx:Declarations>
	<s:Label id="lbltitulo" x="517" y="22" fontSize="36" text="Préstamo de Artículos" rollOver="Soundlbl(event)"/>
	
	<mx:MenuBar id="menuGlobal" x="338" y="171" width="711" height="41"
				dataProvider="{menuBarCollection}" fontSize="13" fontWeight="bold"
				itemClick="menuHandler(event)" labelField="@label"/>
	<s:Button id="btnhelp" x="1283" y="22" width="21" height="18" chromeColor="#FFFFFF"
			  click="btnhelp_clickHandler(event)" cornerRadius="5" icon="assets/ayuda.png"
			  toolTip="Presione para obtener ayuda " rollOver=" Sound3(event)"/>
	<s:Button id="btnUpdateLeterUp" x="1259" y="63" width="46" height="20" label=" A +"
			  click="btnUpdateLeterUp_clickHandler(event)" fontSize="14" fontWeight="bold"
			  toolTip="Presione para aumentar el tamaño de la funte " rollOver="Sound3 (event)"/>
	<s:Button id="btnUpdateLeterDown" x="1213" y="66" width="38" height="17" label="A -"
			  click="btnUpdateLeterDown_clickHandler(event)" fontSize="10" fontWeight="bold"
			  toolTip="Presione para disminuir el tamaño de la fuente" rollOver="Sound3 (event)"/>
	<s:CheckBox id="btndaltonico" x="1283" y="125" width="21" height="27"
				click="checkbox1_clickHandler(event)" />
	<s:Label x="1132" y="120" width="150" height="35" text="Modo daltonico" textAlign="center"
			 verticalAlign="middle" rollOver="Soundlbl(event)"/>
	<s:Button id="btnsonido" x="1165" y="89" width="140" height="23" label="Activar Sonido"
			  click="button1_clickHandler(event)" icon="assets/soun.png"
			  toolTip="Presione aquí para activar los sonidos de los objetos de la interfaz" rollOver="Sound3 (event)"/>
	
	<mx:Button id="mybutton" x="200" y="190" label="Open Menu" click="showMenu()"/>
	
</s:Application>
